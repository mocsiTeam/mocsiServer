type User {
  id: ID!
  nickname: String!
  firstname: String!
  lastname: String!
  email: String!
  role: String!
  groups: [String!]!
  error: String!
}

type Tokens {
  accessToken: String!
  refreshToken: String!
}

type Group { 
  id: ID!
  name: String!
  countUsers: Int!
  owner: User!
  editors: [User!]
  users: [User!]
  error: String!
}

type Room {
  id: ID!
  name: String!
  link: String!
  password: String!
  owner: User!
  editors: [User!]
  users: [User!]
  error: String!
}

input NewUser {
  email: String!
  password: String!
  nickname: String!
  firstname: String!
  lastname: String!
}

input RefreshTokenInput{
  token: String!
}

input Login {
  nickname: String!
  password: String!
}

input UsersToRoom {
  roomID: ID!
  usersID: [ID!]
}

input GroupsToRoom {
  roomID: ID!
  groupsID: [ID!]
}

input NewGroup {
  name: String!
  private: Boolean!
}

input UsersToGroup {
  groupID: ID!
  usersID: [ID!]
}

input InfoGroups {
  groupsID: [String!]
  isPrivate: Boolean!
}

input NewRoom {
  name: String!
  password: String!
}

type Query {
  getAuthUser: User!
  getAllUsers: [User!]
  getUsers(input: [String!]): [User!]
  getGroups(input: InfoGroups!): [Group!]
  getMyGroups: [Group!]
}

type Mutation {
  createUser(input: NewUser!): Tokens!
  login(input: Login!): Tokens!
  refreshToken(input: RefreshTokenInput!): String!
  createGroup(input: NewGroup!): Group!
  addUsersToGroup(input: UsersToGroup!): String!
  addEditorsToGroup(input: UsersToGroup!): String!
  kickUsersFromGroup(input: UsersToGroup!): String!
  deleteGroup(input: ID!): String!
  createRoom(input: NewRoom!): Room!
  addUsersToRoom(input: UsersToRoom): String!
  addGroupToRoom(input: GroupsToRoom): String!
  kickUsersFromRoom(input: UsersToRoom): String!
  kickGroupsFromRoom(input: GroupsToRoom): String!
  deleteRoom(input: ID!): String!
}