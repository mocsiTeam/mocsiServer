type User {
  id: ID!
  nickname: String!
  firstname: String!
  lastname: String!
  email: String!
  role: String!
  groups: [String!]!
  error: String!
}


type Tokens {
  accessToken: String!
  refreshToken: String!
}

type Group { 
  id: ID!
  name: String!
  countUsers: Int!
  owner: User!
  editors: [User!]
  users: [User!]
}

type Room {
  id: ID!
  unique_name: String!
  name: String!
  link: String!
  owner: User!
  editors: [User!]
  users: [User!]
}

type Event {
  message: String!
}

input NewUser {
  email: String!
  password: String!
  nickname: String!
  firstname: String!
  lastname: String!
}

input RefreshTokenInput{
  token: String!
}

input Login {
  nickname: String!
  password: String!
}

input UsersToRoom {
  roomID: ID!
  usersID: [ID!]
}

input GroupsToRoom {
  roomID: ID!
  groupsID: [ID!]
}

input NewGroup {
  name: String!
  private: Boolean!
}

input UsersToGroup {
  groupID: ID!
  usersID: [ID!]
}

input InfoGroups {
  groupsID: [String!]
  isPrivate: Boolean!
}

input NewRoom {
  unique_name: String!
  name: String!
  password: String!
}

input NewEvent {
  idRoom: ID!
  datetime: DateTime!
}

type Query {
  getAuthUser: User!

  getAllUsers: [User!]

  getUsers(nicknames: [String!]): [User!]

  getGroups(input: InfoGroups!): [Group!]

  getMyGroups: [Group!]

  getMyRooms: [Room!]

  getRooms(id: [ID!]): [Room!]

  getRoomsMonth(month: DateTime!): [Room!]
}

type Mutation {
  createUser(input: NewUser!): Tokens!

  login(input: Login!): Tokens!

  refreshToken(token: RefreshTokenInput!): String!

  createGroup(input: NewGroup!): Group!

  addUsersToGroup(input: UsersToGroup!): String!

  addEditorsToGroup(input: UsersToGroup!): String!

  kickUsersFromGroup(input: UsersToGroup!): String!

  deleteGroup(id: ID!): String!

  createRoom(input: NewRoom!): Room!

  createEvent(input: NewEvent): String! 

  addUsersToRoom(input: UsersToRoom!): String!

  addGroupToRoom(input: GroupsToRoom!): String!

  addEditorsToRoom(input: UsersToRoom!): String!

  kickUsersFromRoom(input: UsersToRoom!): String!

  kickGroupsFromRoom(input: GroupsToRoom!): String!

  kickEditorsFromRoom(input: UsersToRoom!): String!

  deleteRoom(id: ID!): String!
}

type Subscription {

  notification: Event!

}

scalar DateTime